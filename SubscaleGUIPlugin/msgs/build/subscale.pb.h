// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscale.proto

#ifndef PROTOBUF_INCLUDED_subscale_2eproto
#define PROTOBUF_INCLUDED_subscale_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_subscale_2eproto 

namespace protobuf_subscale_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_subscale_2eproto
namespace SubscaleGUIPlugin_msgs {
namespace msgs {
class Subscale;
class SubscaleDefaultTypeInternal;
extern SubscaleDefaultTypeInternal _Subscale_default_instance_;
}  // namespace msgs
}  // namespace SubscaleGUIPlugin_msgs
namespace google {
namespace protobuf {
template<> ::SubscaleGUIPlugin_msgs::msgs::Subscale* Arena::CreateMaybeMessage<::SubscaleGUIPlugin_msgs::msgs::Subscale>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace SubscaleGUIPlugin_msgs {
namespace msgs {

// ===================================================================

class Subscale : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SubscaleGUIPlugin_msgs.msgs.Subscale) */ {
 public:
  Subscale();
  virtual ~Subscale();

  Subscale(const Subscale& from);

  inline Subscale& operator=(const Subscale& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscale(Subscale&& from) noexcept
    : Subscale() {
    *this = ::std::move(from);
  }

  inline Subscale& operator=(Subscale&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscale& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscale* internal_default_instance() {
    return reinterpret_cast<const Subscale*>(
               &_Subscale_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Subscale* other);
  friend void swap(Subscale& a, Subscale& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscale* New() const final {
    return CreateMaybeMessage<Subscale>(NULL);
  }

  Subscale* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Subscale>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Subscale& from);
  void MergeFrom(const Subscale& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subscale* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float left_aileron = 1;
  bool has_left_aileron() const;
  void clear_left_aileron();
  static const int kLeftAileronFieldNumber = 1;
  float left_aileron() const;
  void set_left_aileron(float value);

  // optional float right_aileron = 2;
  bool has_right_aileron() const;
  void clear_right_aileron();
  static const int kRightAileronFieldNumber = 2;
  float right_aileron() const;
  void set_right_aileron(float value);

  // optional float elevators = 3;
  bool has_elevators() const;
  void clear_elevators();
  static const int kElevatorsFieldNumber = 3;
  float elevators() const;
  void set_elevators(float value);

  // optional float rudder = 4;
  bool has_rudder() const;
  void clear_rudder();
  static const int kRudderFieldNumber = 4;
  float rudder() const;
  void set_rudder(float value);

  // optional float cmd_propeller_speed = 5;
  bool has_cmd_propeller_speed() const;
  void clear_cmd_propeller_speed();
  static const int kCmdPropellerSpeedFieldNumber = 5;
  float cmd_propeller_speed() const;
  void set_cmd_propeller_speed(float value);

  // optional float cmd_left_aileron = 6;
  bool has_cmd_left_aileron() const;
  void clear_cmd_left_aileron();
  static const int kCmdLeftAileronFieldNumber = 6;
  float cmd_left_aileron() const;
  void set_cmd_left_aileron(float value);

  // optional float cmd_right_aileron = 7;
  bool has_cmd_right_aileron() const;
  void clear_cmd_right_aileron();
  static const int kCmdRightAileronFieldNumber = 7;
  float cmd_right_aileron() const;
  void set_cmd_right_aileron(float value);

  // optional float cmd_elevators = 8;
  bool has_cmd_elevators() const;
  void clear_cmd_elevators();
  static const int kCmdElevatorsFieldNumber = 8;
  float cmd_elevators() const;
  void set_cmd_elevators(float value);

  // optional float cmd_rudder = 9;
  bool has_cmd_rudder() const;
  void clear_cmd_rudder();
  static const int kCmdRudderFieldNumber = 9;
  float cmd_rudder() const;
  void set_cmd_rudder(float value);

  // @@protoc_insertion_point(class_scope:SubscaleGUIPlugin_msgs.msgs.Subscale)
 private:
  void set_has_left_aileron();
  void clear_has_left_aileron();
  void set_has_right_aileron();
  void clear_has_right_aileron();
  void set_has_elevators();
  void clear_has_elevators();
  void set_has_rudder();
  void clear_has_rudder();
  void set_has_cmd_propeller_speed();
  void clear_has_cmd_propeller_speed();
  void set_has_cmd_left_aileron();
  void clear_has_cmd_left_aileron();
  void set_has_cmd_right_aileron();
  void clear_has_cmd_right_aileron();
  void set_has_cmd_elevators();
  void clear_has_cmd_elevators();
  void set_has_cmd_rudder();
  void clear_has_cmd_rudder();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float left_aileron_;
  float right_aileron_;
  float elevators_;
  float rudder_;
  float cmd_propeller_speed_;
  float cmd_left_aileron_;
  float cmd_right_aileron_;
  float cmd_elevators_;
  float cmd_rudder_;
  friend struct ::protobuf_subscale_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Subscale

// optional float left_aileron = 1;
inline bool Subscale::has_left_aileron() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscale::set_has_left_aileron() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscale::clear_has_left_aileron() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscale::clear_left_aileron() {
  left_aileron_ = 0;
  clear_has_left_aileron();
}
inline float Subscale::left_aileron() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.left_aileron)
  return left_aileron_;
}
inline void Subscale::set_left_aileron(float value) {
  set_has_left_aileron();
  left_aileron_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.left_aileron)
}

// optional float right_aileron = 2;
inline bool Subscale::has_right_aileron() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subscale::set_has_right_aileron() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subscale::clear_has_right_aileron() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subscale::clear_right_aileron() {
  right_aileron_ = 0;
  clear_has_right_aileron();
}
inline float Subscale::right_aileron() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.right_aileron)
  return right_aileron_;
}
inline void Subscale::set_right_aileron(float value) {
  set_has_right_aileron();
  right_aileron_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.right_aileron)
}

// optional float elevators = 3;
inline bool Subscale::has_elevators() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subscale::set_has_elevators() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Subscale::clear_has_elevators() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Subscale::clear_elevators() {
  elevators_ = 0;
  clear_has_elevators();
}
inline float Subscale::elevators() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.elevators)
  return elevators_;
}
inline void Subscale::set_elevators(float value) {
  set_has_elevators();
  elevators_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.elevators)
}

// optional float rudder = 4;
inline bool Subscale::has_rudder() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Subscale::set_has_rudder() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Subscale::clear_has_rudder() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Subscale::clear_rudder() {
  rudder_ = 0;
  clear_has_rudder();
}
inline float Subscale::rudder() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.rudder)
  return rudder_;
}
inline void Subscale::set_rudder(float value) {
  set_has_rudder();
  rudder_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.rudder)
}

// optional float cmd_propeller_speed = 5;
inline bool Subscale::has_cmd_propeller_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Subscale::set_has_cmd_propeller_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Subscale::clear_has_cmd_propeller_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Subscale::clear_cmd_propeller_speed() {
  cmd_propeller_speed_ = 0;
  clear_has_cmd_propeller_speed();
}
inline float Subscale::cmd_propeller_speed() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_propeller_speed)
  return cmd_propeller_speed_;
}
inline void Subscale::set_cmd_propeller_speed(float value) {
  set_has_cmd_propeller_speed();
  cmd_propeller_speed_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_propeller_speed)
}

// optional float cmd_left_aileron = 6;
inline bool Subscale::has_cmd_left_aileron() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Subscale::set_has_cmd_left_aileron() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Subscale::clear_has_cmd_left_aileron() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Subscale::clear_cmd_left_aileron() {
  cmd_left_aileron_ = 0;
  clear_has_cmd_left_aileron();
}
inline float Subscale::cmd_left_aileron() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_left_aileron)
  return cmd_left_aileron_;
}
inline void Subscale::set_cmd_left_aileron(float value) {
  set_has_cmd_left_aileron();
  cmd_left_aileron_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_left_aileron)
}

// optional float cmd_right_aileron = 7;
inline bool Subscale::has_cmd_right_aileron() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Subscale::set_has_cmd_right_aileron() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Subscale::clear_has_cmd_right_aileron() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Subscale::clear_cmd_right_aileron() {
  cmd_right_aileron_ = 0;
  clear_has_cmd_right_aileron();
}
inline float Subscale::cmd_right_aileron() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_right_aileron)
  return cmd_right_aileron_;
}
inline void Subscale::set_cmd_right_aileron(float value) {
  set_has_cmd_right_aileron();
  cmd_right_aileron_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_right_aileron)
}

// optional float cmd_elevators = 8;
inline bool Subscale::has_cmd_elevators() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Subscale::set_has_cmd_elevators() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Subscale::clear_has_cmd_elevators() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Subscale::clear_cmd_elevators() {
  cmd_elevators_ = 0;
  clear_has_cmd_elevators();
}
inline float Subscale::cmd_elevators() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_elevators)
  return cmd_elevators_;
}
inline void Subscale::set_cmd_elevators(float value) {
  set_has_cmd_elevators();
  cmd_elevators_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_elevators)
}

// optional float cmd_rudder = 9;
inline bool Subscale::has_cmd_rudder() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Subscale::set_has_cmd_rudder() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Subscale::clear_has_cmd_rudder() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Subscale::clear_cmd_rudder() {
  cmd_rudder_ = 0;
  clear_has_cmd_rudder();
}
inline float Subscale::cmd_rudder() const {
  // @@protoc_insertion_point(field_get:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_rudder)
  return cmd_rudder_;
}
inline void Subscale::set_cmd_rudder(float value) {
  set_has_cmd_rudder();
  cmd_rudder_ = value;
  // @@protoc_insertion_point(field_set:SubscaleGUIPlugin_msgs.msgs.Subscale.cmd_rudder)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace msgs
}  // namespace SubscaleGUIPlugin_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_subscale_2eproto
