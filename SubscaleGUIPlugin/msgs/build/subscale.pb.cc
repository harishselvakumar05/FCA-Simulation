// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscale.proto

#include "subscale.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace SubscaleGUIPlugin_msgs {
namespace msgs {
class SubscaleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subscale>
      _instance;
} _Subscale_default_instance_;
}  // namespace msgs
}  // namespace SubscaleGUIPlugin_msgs
namespace protobuf_subscale_2eproto {
static void InitDefaultsSubscale() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::SubscaleGUIPlugin_msgs::msgs::_Subscale_default_instance_;
    new (ptr) ::SubscaleGUIPlugin_msgs::msgs::Subscale();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SubscaleGUIPlugin_msgs::msgs::Subscale::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Subscale =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSubscale}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Subscale.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, left_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, right_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, elevators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, rudder_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, cmd_propeller_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, cmd_left_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, cmd_right_aileron_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, cmd_elevators_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SubscaleGUIPlugin_msgs::msgs::Subscale, cmd_rudder_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::SubscaleGUIPlugin_msgs::msgs::Subscale)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SubscaleGUIPlugin_msgs::msgs::_Subscale_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "subscale.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016subscale.proto\022\033SubscaleGUIPlugin_msgs"
      ".msgs\"\327\001\n\010Subscale\022\024\n\014left_aileron\030\001 \001(\002"
      "\022\025\n\rright_aileron\030\002 \001(\002\022\021\n\televators\030\003 \001"
      "(\002\022\016\n\006rudder\030\004 \001(\002\022\033\n\023cmd_propeller_spee"
      "d\030\005 \001(\002\022\030\n\020cmd_left_aileron\030\006 \001(\002\022\031\n\021cmd"
      "_right_aileron\030\007 \001(\002\022\025\n\rcmd_elevators\030\010 "
      "\001(\002\022\022\n\ncmd_rudder\030\t \001(\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subscale.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_subscale_2eproto
namespace SubscaleGUIPlugin_msgs {
namespace msgs {

// ===================================================================

void Subscale::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscale::kLeftAileronFieldNumber;
const int Subscale::kRightAileronFieldNumber;
const int Subscale::kElevatorsFieldNumber;
const int Subscale::kRudderFieldNumber;
const int Subscale::kCmdPropellerSpeedFieldNumber;
const int Subscale::kCmdLeftAileronFieldNumber;
const int Subscale::kCmdRightAileronFieldNumber;
const int Subscale::kCmdElevatorsFieldNumber;
const int Subscale::kCmdRudderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscale::Subscale()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_subscale_2eproto::scc_info_Subscale.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SubscaleGUIPlugin_msgs.msgs.Subscale)
}
Subscale::Subscale(const Subscale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&left_aileron_, &from.left_aileron_,
    static_cast<size_t>(reinterpret_cast<char*>(&cmd_rudder_) -
    reinterpret_cast<char*>(&left_aileron_)) + sizeof(cmd_rudder_));
  // @@protoc_insertion_point(copy_constructor:SubscaleGUIPlugin_msgs.msgs.Subscale)
}

void Subscale::SharedCtor() {
  ::memset(&left_aileron_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cmd_rudder_) -
      reinterpret_cast<char*>(&left_aileron_)) + sizeof(cmd_rudder_));
}

Subscale::~Subscale() {
  // @@protoc_insertion_point(destructor:SubscaleGUIPlugin_msgs.msgs.Subscale)
  SharedDtor();
}

void Subscale::SharedDtor() {
}

void Subscale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Subscale::descriptor() {
  ::protobuf_subscale_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscale_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subscale& Subscale::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_subscale_2eproto::scc_info_Subscale.base);
  return *internal_default_instance();
}


void Subscale::Clear() {
// @@protoc_insertion_point(message_clear_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&left_aileron_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cmd_elevators_) -
        reinterpret_cast<char*>(&left_aileron_)) + sizeof(cmd_elevators_));
  }
  cmd_rudder_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Subscale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_aileron = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_left_aileron();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float right_aileron = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_right_aileron();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float elevators = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_elevators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &elevators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rudder = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_rudder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rudder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cmd_propeller_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_cmd_propeller_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_propeller_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cmd_left_aileron = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_cmd_left_aileron();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_left_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cmd_right_aileron = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_cmd_right_aileron();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_right_aileron_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cmd_elevators = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_cmd_elevators();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_elevators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float cmd_rudder = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_cmd_rudder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cmd_rudder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SubscaleGUIPlugin_msgs.msgs.Subscale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SubscaleGUIPlugin_msgs.msgs.Subscale)
  return false;
#undef DO_
}

void Subscale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float left_aileron = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_aileron(), output);
  }

  // optional float right_aileron = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_aileron(), output);
  }

  // optional float elevators = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->elevators(), output);
  }

  // optional float rudder = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->rudder(), output);
  }

  // optional float cmd_propeller_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cmd_propeller_speed(), output);
  }

  // optional float cmd_left_aileron = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cmd_left_aileron(), output);
  }

  // optional float cmd_right_aileron = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cmd_right_aileron(), output);
  }

  // optional float cmd_elevators = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cmd_elevators(), output);
  }

  // optional float cmd_rudder = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cmd_rudder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SubscaleGUIPlugin_msgs.msgs.Subscale)
}

::google::protobuf::uint8* Subscale::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float left_aileron = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_aileron(), target);
  }

  // optional float right_aileron = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_aileron(), target);
  }

  // optional float elevators = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->elevators(), target);
  }

  // optional float rudder = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->rudder(), target);
  }

  // optional float cmd_propeller_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cmd_propeller_speed(), target);
  }

  // optional float cmd_left_aileron = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cmd_left_aileron(), target);
  }

  // optional float cmd_right_aileron = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cmd_right_aileron(), target);
  }

  // optional float cmd_elevators = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cmd_elevators(), target);
  }

  // optional float cmd_rudder = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cmd_rudder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SubscaleGUIPlugin_msgs.msgs.Subscale)
  return target;
}

size_t Subscale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float left_aileron = 1;
    if (has_left_aileron()) {
      total_size += 1 + 4;
    }

    // optional float right_aileron = 2;
    if (has_right_aileron()) {
      total_size += 1 + 4;
    }

    // optional float elevators = 3;
    if (has_elevators()) {
      total_size += 1 + 4;
    }

    // optional float rudder = 4;
    if (has_rudder()) {
      total_size += 1 + 4;
    }

    // optional float cmd_propeller_speed = 5;
    if (has_cmd_propeller_speed()) {
      total_size += 1 + 4;
    }

    // optional float cmd_left_aileron = 6;
    if (has_cmd_left_aileron()) {
      total_size += 1 + 4;
    }

    // optional float cmd_right_aileron = 7;
    if (has_cmd_right_aileron()) {
      total_size += 1 + 4;
    }

    // optional float cmd_elevators = 8;
    if (has_cmd_elevators()) {
      total_size += 1 + 4;
    }

  }
  // optional float cmd_rudder = 9;
  if (has_cmd_rudder()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscale* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscale>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SubscaleGUIPlugin_msgs.msgs.Subscale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SubscaleGUIPlugin_msgs.msgs.Subscale)
    MergeFrom(*source);
  }
}

void Subscale::MergeFrom(const Subscale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      left_aileron_ = from.left_aileron_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_aileron_ = from.right_aileron_;
    }
    if (cached_has_bits & 0x00000004u) {
      elevators_ = from.elevators_;
    }
    if (cached_has_bits & 0x00000008u) {
      rudder_ = from.rudder_;
    }
    if (cached_has_bits & 0x00000010u) {
      cmd_propeller_speed_ = from.cmd_propeller_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      cmd_left_aileron_ = from.cmd_left_aileron_;
    }
    if (cached_has_bits & 0x00000040u) {
      cmd_right_aileron_ = from.cmd_right_aileron_;
    }
    if (cached_has_bits & 0x00000080u) {
      cmd_elevators_ = from.cmd_elevators_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_cmd_rudder(from.cmd_rudder());
  }
}

void Subscale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscale::CopyFrom(const Subscale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SubscaleGUIPlugin_msgs.msgs.Subscale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscale::IsInitialized() const {
  return true;
}

void Subscale::Swap(Subscale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subscale::InternalSwap(Subscale* other) {
  using std::swap;
  swap(left_aileron_, other->left_aileron_);
  swap(right_aileron_, other->right_aileron_);
  swap(elevators_, other->elevators_);
  swap(rudder_, other->rudder_);
  swap(cmd_propeller_speed_, other->cmd_propeller_speed_);
  swap(cmd_left_aileron_, other->cmd_left_aileron_);
  swap(cmd_right_aileron_, other->cmd_right_aileron_);
  swap(cmd_elevators_, other->cmd_elevators_);
  swap(cmd_rudder_, other->cmd_rudder_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Subscale::GetMetadata() const {
  protobuf_subscale_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_subscale_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace msgs
}  // namespace SubscaleGUIPlugin_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SubscaleGUIPlugin_msgs::msgs::Subscale* Arena::CreateMaybeMessage< ::SubscaleGUIPlugin_msgs::msgs::Subscale >(Arena* arena) {
  return Arena::CreateInternal< ::SubscaleGUIPlugin_msgs::msgs::Subscale >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
